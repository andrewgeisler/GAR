GAR_CLIENT_ID <- "990083473458-gac6ej3lihk1vv33rc9qg7q1e5dd3r19.apps.googleusercontent.com"
GAR_CLIENT_SECRET <- "JKh81GVcSUbnAUU8SXkGF0h5"
require(GAR)
?GAR
getCode(GAR_CLIENT_ID)
code <-  '4/9403sn4CsoWuUfHeeda__y2siSMhmIUSisGbNWjTfDQ.kkDr8WZcmWkT3oEBd8DOtNCliwywmAI'
?GAR
GAR_REFRESH_TOKEN <-  getRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, code)
df <- gaRequest(
id=c("ga:19254151","ga:72498649",
dimensions='ga:date,ga:month',
metrics='ga:sessions,ga:users,ga:pageviews',
start='2015-01-01',
end='2015-01-31',
sort='-ga:sessions,ga:users'
)
df <- gaRequest(
id=c("ga:19254151","ga:72498649"),
dimensions='ga:date,ga:month',
metrics='ga:sessions,ga:users,ga:pageviews',
start='2015-01-01',
end='2015-01-31',
sort='-ga:sessions,ga:users'
)
View(df)
tokenRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, GAR_REFRESH_TOKEN)
df <- gaRequest(
id=c("ga:19254151","ga:72498649"),
dimensions='ga:date,ga:month',
metrics='ga:sessions,ga:users,ga:pageviews',
start='2015-01-01',
end='2015-01-31',
sort='-ga:sessions,ga:users'
)
View(df)
str(df)
?![alt text]
?rmarkdown
install.packages('GAR')
?IMAGES
??IMAGES
require(grid)
require(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='andrewgeisler', token='8633B1CAE1A1F888CF86731AAAA914A6', secret='3HubnqMH00qPJ7cnS/RCALnIMC9DHP9sKxVf0ZK1')
library(shinyapps)
getwd()
shinyapps::deployApp('GAR_tutorial.Rmd')
shinyapps::deployApp('/Users/andrewgeisler/git/GAR-Tutorial')
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(shinyapps)
date: "March 26, 2015"
---
title: "GAR (Google Analytics for R) Tutorial"
author: "Andrew Geisler"
date: "March 26, 2015"
output:
html_document:
fig_height: 2
fig_width: 5
---
```{r,echo=FALSE, include=FALSE}
require(png)
require(grid)
```
The GAR - Google Analytics for R package - is designed to help easily retreive data from Google Analytics. The following tutorial walks through set up, authentication and requesting data.
#### Sections:
* API Project Set Up
* Initial Authentication
* Getting the Refresh Token
* Getting the Access Token
* Getting the Data
*Note: For obvious reasons, permission/access to at least one Google Analytics Account is necessary.*
####API Project Set Up:
1. Log in to Google's API Console (https://code.google.com/apis/console).
2. From the Projects tab select *Create Project* and fill out a Project Name. It's not necessary to change the Project ID. Note: the Project ID can not be changed later.
~*Figure 1*~
![IMAGES](IMAGES/API-S2a.png)
~*Figure 2*~
![IMAGES](IMAGES/API-S2b.png)
3. Navigate to *APIs* under the APIs & auth section on the left side nav. Select the *Analytics API* link and enable the Analytics API.
~*Figure 3*~
![IMAGES](IMAGES/API-S3a.png)
~*Figure 4*~
![IMAGES](IMAGES/API-S3b.png)
4. Navigate to *Credentials* under the APIs & auth section on the left side nav and select *Create new Client ID*.
~*Figure 5*~
![IMAGES](IMAGES/API-S4.png)
5. Create the *Client ID* as an *Installed application*. Fill out appropriate information on the following 'Consent Screen'.
~*Figure 6*~
![IMAGES](IMAGES/API-S5a.png)
~*Figure 7*~
![IMAGES](IMAGES/API-S5b.png)
6. Copy Client ID and Client Secret to R Session.
~*Figure 8*~
![IMAGES](IMAGES/API-S6.png)
####Initial Authentication
* Authenticating the app involves retrieving an initial *code*, retrieving a *refresh token*, then retrieving an *access token*.
* The *code* is used just for initial authentication. The *refresh token* is long lived and can be used continually to get new *access tokens* without the need for manual authentication via a web browser.
* Install and load the GAR Packages
```{r, eval=FALSE}
install.packages('GAR', type=source)
library(GAR)
```
####Getting the Refresh Token:
1. Store Client ID and Client Secret as variables.
```{r, eval=FALSE}
GAR_CLIENT_ID <- 'client id copied from API Console'
GAR_CLIENT_SECRET <- 'client secret copied from API Console'
```
2. Pass the Client ID variable to the getCode() function. This will open up a browser with a prompt for authentication.
```{r, eval=FALSE}
getCode(GAR_CLIENT_ID)
```
3. After accepting, the resulting URL will contain a ?code parameter followed by a long string. Copy this code to the R Session.
~*Figure 9*~
![alt text](IMAGES/GR-S3b.png)
4. Pass the Client ID, Client Secret and code variables to the getRefresh() function and store result in a variable.
```{r, eval=FALSE}
GAR_REFRESH_TOKEN <- getRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, code)
```
*Note: Initial authentication and retreiving the refresh token is a one time requirement. Repeating these steps is only necessary if authentication is revoked or if the Client ID, Client Secret or Refresh token is misplaced.*
####Getting the Access Token:
1. Pass the Client ID, Client Secret and Refresh Token variables to tokenRefresh(). The resulting access token is stored as environmental variable accessible by the GAR Package.
```{r, eval=FALSE}
tokenRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, GAR_REFRESH_TOKEN)
```
2. Since access tokens do expire, it is necessary to execute the tokenRefresh() function at the beginning of a session or any time an access token expires.
####Getting the Data:
1. Data is retrieved using the gaRequest() function. The request will authenticate using the access token stored as an environmental variable by default.
```{r, eval=FALSE}
df <- gaRequest(
id=c('ga:123456789','ga:987654321'),
dimensions='ga:date,ga:month',
metrics='ga:sessions, ga:users, ga:pageviews',
start='YYYY-MM-DD',
end='YYYY-MM-DD',
sort='-ga:sessions,ga:users'
)
```
2. The arguments used by the gaRequest() function are based on the structure of the typical API call to Google Analytics. See ?gaRequest for more information on which arguments are required and which are optional.
####The Result:
In addition to the requested dimensions and metrics, the data frame output of gaRequest() contains information about the request:
* profileId
* accountId
* webPropertyId
* internalWebPropertyId
* profileName
* tableId
* start-date
* end-date
This information is useful as the gaRequest() function allows for querying multiple GA accounts at one time.
~*Figure 10*~
![IMAGES](IMAGES/Example-Data.png)
####Helpful hints:
Since the Client ID, Client Secret and Refresh Token are needed each session, it is recommended to store these values in your *.Rprofile* config file as environmental variables named: GAR_CLIENT_ID, GAR_CLIENT_SECRET and GAR_REFRESH_TOKEN. The GAR package is designed to look for and use these variables by default.
Simple! Once initial authentication is made and credentials are saved to your config file it is very easy to refresh the acccess token (*refreshToken()*) and retreive data (*gaRequest()*) on a continual basis.
Enjoy!
---
title: "GAR (Google Analytics for R) Tutorial"
author: "Andrew Geisler"
date: "March 26, 2015"
output:
html_document:
fig_height: 2
fig_width: 5
---
```{r,echo=FALSE, include=FALSE}
require(png)
require(grid)
```
The GAR - Google Analytics for R package - is designed to help easily retreive data from Google Analytics. The following tutorial walks through set up, authentication and requesting data.
#### Sections:
* API Project Set Up
* Initial Authentication
* Getting the Refresh Token
* Getting the Access Token
* Getting the Data
*Note: For obvious reasons, permission/access to at least one Google Analytics Account is necessary.*
####API Project Set Up:
1. Log in to Google's API Console (https://code.google.com/apis/console).
2. From the Projects tab select *Create Project* and fill out a Project Name. It's not necessary to change the Project ID. Note: the Project ID can not be changed later.
~*Figure 1*~
![IMAGES](IMAGES/API-S2a.png)
~*Figure 2*~
![IMAGES](IMAGES/API-S2b.png)
3. Navigate to *APIs* under the APIs & auth section on the left side nav. Select the *Analytics API* link and enable the Analytics API.
~*Figure 3*~
![IMAGES](IMAGES/API-S3a.png)
~*Figure 4*~
![IMAGES](IMAGES/API-S3b.png)
4. Navigate to *Credentials* under the APIs & auth section on the left side nav and select *Create new Client ID*.
~*Figure 5*~
![IMAGES](IMAGES/API-S4.png)
5. Create the *Client ID* as an *Installed application*. Fill out appropriate information on the following 'Consent Screen'.
~*Figure 6*~
![IMAGES](IMAGES/API-S5a.png)
~*Figure 7*~
![IMAGES](IMAGES/API-S5b.png)
6. Copy Client ID and Client Secret to R Session.
~*Figure 8*~
![IMAGES](IMAGES/API-S6.png)
####Initial Authentication
* Authenticating the app involves retrieving an initial *code*, retrieving a *refresh token*, then retrieving an *access token*.
* The *code* is used just for initial authentication. The *refresh token* is long lived and can be used continually to get new *access tokens* without the need for manual authentication via a web browser.
* Install and load the GAR Packages
```{r, eval=FALSE}
install.packages('GAR', type=source)
library(GAR)
```
####Getting the Refresh Token:
1. Store Client ID and Client Secret as variables.
```{r, eval=FALSE}
GAR_CLIENT_ID <- 'client id copied from API Console'
GAR_CLIENT_SECRET <- 'client secret copied from API Console'
```
2. Pass the Client ID variable to the getCode() function. This will open up a browser with a prompt for authentication.
```{r, eval=FALSE}
getCode(GAR_CLIENT_ID)
```
3. After accepting, the resulting URL will contain a ?code parameter followed by a long string. Copy this code to the R Session.
~*Figure 9*~
![alt text](IMAGES/GR-S3b.png)
4. Pass the Client ID, Client Secret and code variables to the getRefresh() function and store result in a variable.
```{r, eval=FALSE}
GAR_REFRESH_TOKEN <- getRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, code)
```
*Note: Initial authentication and retreiving the refresh token is a one time requirement. Repeating these steps is only necessary if authentication is revoked or if the Client ID, Client Secret or Refresh token is misplaced.*
####Getting the Access Token:
1. Pass the Client ID, Client Secret and Refresh Token variables to tokenRefresh(). The resulting access token is stored as environmental variable accessible by the GAR Package.
```{r, eval=FALSE}
tokenRefresh(GAR_CLIENT_ID, GAR_CLIENT_SECRET, GAR_REFRESH_TOKEN)
```
2. Since access tokens do expire, it is necessary to execute the tokenRefresh() function at the beginning of a session or any time an access token expires.
####Getting the Data:
1. Data is retrieved using the gaRequest() function. The request will authenticate using the access token stored as an environmental variable by default.
```{r, eval=FALSE}
df <- gaRequest(
id=c('ga:123456789','ga:987654321'),
dimensions='ga:date,ga:month',
metrics='ga:sessions, ga:users, ga:pageviews',
start='YYYY-MM-DD',
end='YYYY-MM-DD',
sort='-ga:sessions,ga:users'
)
```
2. The arguments used by the gaRequest() function are based on the structure of the typical API call to Google Analytics. See ?gaRequest for more information on which arguments are required and which are optional.
####The Result:
In addition to the requested dimensions and metrics, the data frame output of gaRequest() contains information about the request:
* profileId
* accountId
* webPropertyId
* internalWebPropertyId
* profileName
* tableId
* start-date
* end-date
This information is useful as the gaRequest() function allows for querying multiple GA accounts at one time.
~*Figure 10*~
![IMAGES](IMAGES/Example-Data.png)
####Helpful hints:
Since the Client ID, Client Secret and Refresh Token are needed each session, it is recommended to store these values in your *.Rprofile* config file as environmental variables named: GAR_CLIENT_ID, GAR_CLIENT_SECRET and GAR_REFRESH_TOKEN. The GAR package is designed to look for and use these variables by default.
Simple! Once initial authentication is made and credentials are saved to your config file it is very easy to refresh the acccess token (*refreshToken()*) and retreive data (*gaRequest()*) on a continual basis.
Enjoy!
install.packages("GAR", type = source)
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(shinyapps)
deploy()
?shinyapps
deployApp()
deployApp()
require(shinyApps)
require(shinyapps)
deployApp()
